/**
 * ATEN√á√ÉO: O C√ìDIGO ABAIXO USA eval() E √â INSEGURO.
 * Ele executa c√≥digo de uma fonte externa com acesso total √† p√°gina,
 * o que representa um risco significativo de seguran√ßa (XSS).
 * Use por sua conta e risco, apenas em ambientes controlados.
 */
(function() {
    const scriptUrl = 'https://raw.githubusercontent.com/seu-usuario/seu-repositorio/main/userscript.js'; // Substitua pela URL correta, se necess√°rio

    console.log(`üöÄ Tentando carregar e executar o script de: ${scriptUrl}`);

    fetch(scriptUrl)
        .then(response => {
            if (!response.ok) {
                throw new Error(`Falha na rede: ${response.status} ${response.statusText}`);
            }
            return response.text();
        })
        .then(text => {
            console.log('‚úÖ Script baixado com sucesso. Processando para execu√ß√£o...');

            // Ponto crucial: Encontrar o fim do bloco de metadados para remov√™-lo.
            const metadataEndMarker = '// ==/UserScript==';
            const codeStartIndex = text.indexOf(metadataEndMarker);

            if (codeStartIndex === -1) {
                // Se n√£o encontrar o marcador, talvez o script n√£o seja um Userscript.
                // Pode tentar executar o texto inteiro, mas ainda √© arriscado.
                console.warn('‚ö†Ô∏è Marcador de fim de metadados "// ==/UserScript==" n√£o encontrado. Tentando executar o script inteiro.');
                return text;
            }

            // Extrai apenas o c√≥digo JavaScript execut√°vel, pulando o bloco de metadados.
            const executableCode = text.substring(codeStartIndex + metadataEndMarker.length);
            
            console.log('‚úÇÔ∏è Bloco de metadados removido. Executando o c√≥digo...');
            
            // A execu√ß√£o insegura acontece aqui.
            eval(executableCode);

            console.log('üéâ Script executado via eval().');
        })
        .catch(error => {
            console.error('‚ùå Erro catastr√≥fico ao carregar ou executar o script:', error);
        });
})();
